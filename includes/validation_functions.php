<?php    $errors = array();    function FieldnameAsText($fieldname) {          $fieldname = str_replace("_", " ", $fieldname);          $fieldname = ucfirst($fieldname);          return $fieldname;    }    // * presence    // use trim() so empty spaces don't count    // use === to avoid false positives    // empty() would consider "0" to be empty    function HasPresence($value) {          return isset($value) && $value !== "";    }    function ValidatePresences($required_fields) {          global $errors;          foreach($required_fields as $field) {                $value = trim($_POST[$field]);                if (!HasPresence($value)) {                      $errors[$field] = FieldnameAsText($field) . " can't be blank";                }          }    }    // * string length    // max length    function HasMaxLength($value, $max) {          return strlen($value) <= $max;    }    function ValidateMaxLengths($fields_with_max_lengths) {          global $errors;          // Expects an assoc. array          foreach($fields_with_max_lengths as $field => $max) {                $value = trim($_POST[$field]);                if (!HasMaxLength($value, $max)) {                      $errors[$field] = FieldnameAsText($field) . " is too long";                }          }    }    // * inclusion in a set    function has_inclusion_in($value, $set) {          return in_array($value, $set);    }    function ValidateEmail($EmailAddress, $EmailSelection) {        global $errors;        if(!filter_var($EmailAddress, FILTER_VALIDATE_EMAIL)) {                        switch($EmailSelection) {                case "Email":                    $errors["EmailAddress"] = "Email address is not valid";                    break;                case "Parent1":                    $errors["Parent1Email"] = "Parent 1 Email address is not valid";                    break;                case "Parent2":                    $errors["Parent2Email"] = "Parent 2 Email address is not valid";                    break;            }                    }    }        function ValidateDate($UserDate) {        global $errors;        $Date = DateTime::createFromFormat('m/d/Y', $UserDate);        $err = $Date->getLastErrors();        if($err['warning_count'] > 0 && $err['error_count'] > 0) {            $errors["Date"] = "Date is not valid";        }    }        function ValidatePassword($Password) {        global $errors;        if (!preg_match_all('$\S*(?=\S{8,})(?=\S*[a-z])(?=\S*[A-Z])(?=\S*[\d])\S*$', $Password)) {            $errors["Password1"] = "Password must be at least 8 characters long";                $errors["Password2"] = "Password must contain at least one lowercase, one uppercase and one number";        }        /*            Explaining $\S*(?=\S{8,})(?=\S*[a-z])(?=\S*[A-Z])(?=\S*[\d])(?=\S*[\W])\S*$            $ = beginning of string            \S* = any set of characters            (?=\S{8,}) = of at least length 8            (?=\S*[a-z]) = containing at least one lowercase letter            (?=\S*[A-Z]) = and at least one uppercase letter            (?=\S*[\d]) = and at least one number            (?=\S*[\W]) = and at least a special character (non-word characters)            $ = end of the string         */    }    function ValidatePhone($PhoneNumber, $PhoneSelection) {        global $errors;        // $PhoneSelection is used to differentiate between each phone number validation        // so the error message is specific.                // This function also formats the phone number for storage in MySQL.        // Only store digits in MySQL.        // Eliminate all characters except 0-9.        $PhoneNumber1 = preg_replace("/[^0-9]/", '', $PhoneNumber);                // Eliminate leading 1 if it exists.        if(strlen($PhoneNumber1) == 11) {            $PhoneNumber2 = preg_replace("/^1/", '', $PhoneNumber1);        } else {            $PhoneNumber2 = $PhoneNumber1;        }                // Check if there are 10 digits left. If so, it is valid. If not, set the error message.        if(strlen($PhoneNumber2) != 10) {                        switch($PhoneSelection) {                case "Home":                    $errors["HomePhone"] = "Home Phone number is incorrect";                    break;                case "Cell":                    $errors["CellPhone"] = "Cell Phone number is incorrect";                    break;                case "Parent1":                    $errors["Parent1Phone"] = "Parent 1 Phone number is incorrect";                    break;                case "Parent2":                    $errors["Parent2Phone"] = "Parent 2 Phone number is incorrect";                    break;            }        }                // Return the formatted phone number.        return $PhoneNumber2;    }    ?>